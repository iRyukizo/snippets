# List of personal snippets for c++ coding style
# Based on EPITA coding style.
# Works better with c.snippets

priority 1

snippet pra "#pragma once" !b
#pragma once
endsnippet

snippet inc "#include local header (inc)" !b
#include "${1:`!p snip.rv = snip.basename + '.hh'`}"
endsnippet

snippet Inc "#include <> (Inc)" !b
#include <${1:iostream}>
endsnippet

snippet mainv "main()" !b
int main()
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet fore "for element in range" !b
for (${3:const }${4:auto&} ${1:elt} : ${2:range})
{
	${0:/* code */}
}
endsnippet

snippet cl "class .. (class)" b
class ${1:`!p snip.rv = snip.basename.title() or "Name"`}
{
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${0:/* code */}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet pair "std::pair<T1, T2>" !b
std::pair<${1:T1}, ${2:T2}>$0
endsnippet

snippet str "std::string" !b
std::string$0
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:T}>
endsnippet

snippet cout "std::cout << token << std::endl;" !b
std::cout << ${1:token}${2: << '\n'};$0
endsnippet

snippet cin "std::cin >> token;" !b
std::cin >> ${1:token};
endsnippet

snippet cerr "std::cerr << error << std::endl" !b
std::cerr << ${1:error}${2: << '\n'};$0
endsnippet

snippet iter "iterator" !b
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4)
{
	${0:/* code */}
}
endsnippet

snippet itera "auto iterator" !b
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1)
{
	${0:std::cout << *$1 << std::endl;}
}
endsnippet

snippet try "try catch" !b
try
{
	${2:/* code */}
}
catch(${1:const std::exception& e})
{
	${0:/* error handling */}
}
endsnippet

snippet ld "lambda expressions" !b
[${1:/* catch */}](${2:arguments}){${0:/* code */}};
endsnippet

snippet pri "private" !b
private
endsnippet

snippet pro "protected" !b
protected
endsnippet

snippet pub "public" !b
public
endsnippet

snippet fr "friend" !b
friend
endsnippet

snippet mu "mutable" !b
mutable
endsnippet

snippet mfoo "member func" !b
${4:void} ${1:`!p snip.rv = snip.basename.title() or "Class"`}::${2:foo}(${3:arguments})
{
	${0:/* code */}
}
endsnippet

snippet TEST "gtest TEST" !b
TEST(${1:TestSuiteName}, ${2:TestCaseName})
{
	${0:/* code */}
}
endsnippet

snippet TEST_F "gtest TEST_F" !b
TEST_F(${1:TestSuiteName}, ${2:TestCaseName})
{
	${0:/* code */}
}
endsnippet

# vim:ft=snippets:
